# Generated by Django 2.2 on 2019-04-14 13:18

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnswerQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(blank=True, help_text='问题', max_length=100, null=True, verbose_name='问题')),
                ('answer', models.CharField(blank=True, help_text='回答', max_length=250, null=True, verbose_name='回答')),
                ('question_time', models.CharField(blank=True, help_text='提问时间', max_length=25, null=True, verbose_name='提问时间')),
            ],
            options={
                'verbose_name': '问答',
                'verbose_name_plural': '问答',
                'db_table': 'answer_question',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FirstCategory',
            fields=[
                ('first_id', models.CharField(help_text='一类编号', max_length=3, primary_key=True, serialize=False, verbose_name='一类编号')),
                ('first_name', models.CharField(blank=True, help_text='一类名称', max_length=32, null=True, verbose_name='一类名称')),
            ],
            options={
                'verbose_name': '第一类',
                'verbose_name_plural': '第一类',
                'db_table': 'first_category',
                'ordering': ['first_id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SecondCategory',
            fields=[
                ('second_id', models.CharField(help_text='二类编号', max_length=6, primary_key=True, serialize=False, verbose_name='二类编号')),
                ('second_name', models.CharField(blank=True, help_text='二类名称', max_length=32, null=True, verbose_name='二类名称')),
            ],
            options={
                'verbose_name': '第二类',
                'verbose_name_plural': '第二类',
                'db_table': 'second_category',
                'ordering': ['second_id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ThirdCategory',
            fields=[
                ('third_id', models.CharField(help_text='三类编号', max_length=16, primary_key=True, serialize=False, verbose_name='三类编号')),
                ('third_name', models.CharField(blank=True, help_text='三类名称', max_length=32, null=True, verbose_name='三类名称')),
            ],
            options={
                'verbose_name': '第三类',
                'verbose_name_plural': '第三类',
                'db_table': 'third_category',
                'ordering': ['third_id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VerifyCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, verbose_name='验证码')),
                ('mobile', models.CharField(max_length=11, verbose_name='电话')),
                ('add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '短信验证码',
                'verbose_name_plural': '短信验证码',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nick_name', models.CharField(default='', max_length=50, verbose_name='昵称')),
                ('birday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('gender', models.CharField(choices=[('male', '男'), ('female', '女')], default='female', max_length=5)),
                ('address', models.CharField(default='', max_length=100)),
                ('mobile', models.CharField(blank=True, max_length=11, null=True)),
                ('image', models.ImageField(default='image/default.png', upload_to='image/%Y%m')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
